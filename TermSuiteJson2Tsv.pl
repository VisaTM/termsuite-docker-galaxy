#!/usr/bin/perl


# Déclaration des pragmas
use strict;
use utf8;
use open qw/:std :utf8/;

# Appel des modules externes de base
use Encode qw(decode_utf8 encode_utf8 is_utf8);
use Getopt::Long;
 
my ($programme) = $0 =~ m|^(?:.*/)?(.+)|;
my $substitut = " " x length($programme);
my $usage = "Usage : \n" .
            "    $programme -f JSON_file[.gz] -s output_file \n" .
            "    $programme -h\n" .
            "\n";

my $version   = "0.2.1";
my $dateModif = "16 Septembre 2019";

# Options
my $aide    = 0;
my $fichier = undef;
my $sortie  = undef;

eval    {
        $SIG{__WARN__} = sub {usage(1);};
        GetOptions(
                "fichier=s"     => \$fichier,
                "help"          => \$aide,
                "sortie=s"      => \$sortie,
                );
        };
$SIG{__WARN__} = sub {warn $_[0];};

if ( $aide ) {
        print "\nProgramme : \n    “$programme”, version $version ($dateModif)\n";
        print "    Extracts from the JSON file generated by “TermSuite” a liste of \n";
        print "    terms and output it as a TSV file. \n";
        print "    \n";
        print $usage;
        print "Options : \n";
        print "   -f  gives the name of the JSON input file \n";
        print "   -h  displays that help and exit \n";
        print "   -s  gives the name of the output TSV file \n";
        print "    \n";

        exit 0;
        }

usage(2) if not $fichier;
usage(3) if not $sortie;

# Variables
my $ok     = 0;
my $file   = "";
my $tid    = "";
my @table  = ();

$SIG{'HUP'} = 'nettoie';
$SIG{'INT'} = 'nettoie';
$SIG{'TERM'} = 'nettoie';

if ( $fichier =~ /\.gz/ ) {
        open(INP, "gzip -cd $fichier |") or die "$!,";
        binmode(INP, ":utf8");
        }
else    {
        open(INP,"<:utf8", $fichier) or die "$!,";
        }

while(<INP>) {
        if ( /^  "input_sources"/o ) {
                $ok ++;
                }
        elsif ( $ok and /^  },/o ) {
                $ok = 0;
                last;
                }
        elsif ( /^    "(\d+)" : "(.+?)"/o ) {
                my $num  = $1;
                my $name = $2;
                $name =~ s|^(.+/)?(.+)|$2|o;
                $table[$num] = $name;
                }
        }

# Ouvertuer du fichier temporaire
my $tmpfile = $ENV{'TMPDIR'} ? "$ENV{'TMPDIR'}/TStmp$$" : "TStmp$$";
open(TMP, ">:utf8", $tmpfile) or die "$!,";

while(<INP>) {
        my $biniou = 1;
        if ( /^  "occurrences"/o ) {
                $ok ++;
                }
        elsif ( $ok ) {
                if ( /^  } ]/o ) {
                        $ok = 0;
                        last;
                        }
                elsif ( /^    "tid" : "(\w+): (.+?)",/o ) {
                        $tid = "$1\t$2";
                        }
                elsif ( /^    "file" : (\d+),/o ) {
                        $file = $1;
                        }
                elsif ( /^    "text" : "(.+?)"/o ) {
                        print TMP "$file\t$tid\t$1\n";
                        }
                }
        }
close INP;
close TMP;

my $file     = undef;
my %tmp      = ();

open(TMP, "sort -n $tmpfile |") or die "$!,";
binmode(TMP, ":utf8");
open(OUT, ">:utf8", $sortie) or die "$!,";
while(<TMP>) {
        chomp;
        my ($num, $cat, $term, $str) = split(/\t/);
        if ( $file and $table[$num] ne $file ) {
                foreach my $item (sort keys %tmp) {
                        print OUT "$file\t$tmp{$item}\t$item\n";
                        }
                $file = undef;
                %tmp = ();
                }
        if ( not $file ) {
                $file = $table[$num];
                }
        $tmp{"$term\t$cat\t$str"} ++;
        }
close TMP;

unlink $tmpfile or die "Impossible de supprimer \"$tmpfile\" : $!,";

if ( $file ) {
        foreach my $item (sort keys %tmp) {
                print OUT "$file\t$tmp{$item}\t$item\n";
                }
        }
close OUT;


exit 0;


sub usage
{
print STDERR $usage;

exit shift;
}

sub nettoie
{
my $signal = shift;

if ( fileno(TMP) ) {
        close TMP;
        }
if ( $tmpfile and -f $tmpfile ) {
        die "Impossible de supprimer \"$tmpfile\" : $!," if not unlink $tmpfile;
        }

if ( $signal =~ /^\d+\z/ ) {
        exit $signal;
        }
if ( $signal ) {
        print STDERR "Signal SIG$signal detected\n";
        exit 9;
        }
else    {
        exit 0;
        }
}
